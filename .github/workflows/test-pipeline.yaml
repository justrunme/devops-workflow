name: CI/CD Pipeline with Kind Testing

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DOCKER_USERNAME: ghcr.io/${{ github.repository_owner }}
  IMAGE_TAG: ${{ github.sha }}
  KIND_CLUSTER_NAME: devops-workflow-kind-cluster

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push frontend-api Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend-api
        push: true
        load: true
        tags: ${{ env.DOCKER_USERNAME }}/devops-workflow-frontend-api:${{ env.IMAGE_TAG }}

    - name: Build and push backend-worker Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend-worker
        push: true
        load: true
        tags: ${{ env.DOCKER_USERNAME }}/devops-workflow-backend-worker:${{ env.IMAGE_TAG }}

    - name: Install Kind
      run: |
        curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.23.0/kind-linux-amd64
        chmod +x ./kind
        sudo mv ./kind /usr/local/bin/kind

    - name: Create Kind cluster
      run: kind create cluster --name ${{ env.KIND_CLUSTER_NAME }}

    - name: Set KUBECONFIG for Terraform
      run: echo "KUBECONFIG=$HOME/.kube/config" >> $GITHUB_ENV

    - name: Check Kind cluster
      run: kubectl get nodes

    - name: Load Docker images into Kind cluster
      run: |
        kind load docker-image ${{ env.DOCKER_USERNAME }}/devops-workflow-frontend-api:${{ env.IMAGE_TAG }} --name ${{ env.KIND_CLUSTER_NAME }}
        kind load docker-image ${{ env.DOCKER_USERNAME }}/devops-workflow-backend-worker:${{ env.IMAGE_TAG }} --name ${{ env.KIND_CLUSTER_NAME }}

    - name: Debug KUBECONFIG path
      run: |
        echo "KUBECONFIG=$KUBECONFIG"
        test -f "$KUBECONFIG" && echo "KUBECONFIG file exists." || echo "KUBECONFIG file NOT found!"

    - name: Check Kubernetes access
      run: kubectl get pods -A

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.0

    - name: Terraform Init
      run: terraform init
      working-directory: ./infra/terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve -var="docker_username=${{ env.DOCKER_USERNAME }}" -var="image_tag=${{ env.IMAGE_TAG }}" -var="kubeconfig_path=$HOME/.kube/config"
      working-directory: ./infra/terraform

    - name: Wait for deployments to be ready
      run: |
        kubectl wait --for=condition=available deployment/redis --timeout=300s
        kubectl wait --for=condition=available deployment/frontend-api --timeout=300s
        kubectl wait --for=condition=available deployment/backend-worker --timeout=300s

    - name: Get Frontend API NodePort
      id: get_nodeport
      run: |
        NODE_PORT=$(kubectl get service frontend-api -o jsonpath='{.spec.ports[0].nodePort}')
        echo "NODE_PORT=$NODE_PORT" >> $GITHUB_OUTPUT

    - name: Describe frontend pod
      run: |
        echo "Pods:"
        kubectl get pods -l app=frontend-api
        POD=$(kubectl get pods -l app=frontend-api -o jsonpath='{.items[0].metadata.name}')
        echo "Describing pod $POD"
        kubectl describe pod $POD
        echo "Logs:"
        kubectl logs $POD

    - name: Logs of frontend-api
      run: |
        POD=$(kubectl get pods -l app=frontend-api -o jsonpath='{.items[0].metadata.name}')
        kubectl logs $POD

    - name: Test Frontend API
      run: |
        echo "Port-forwarding service/frontend-api:80 → localhost:8080..."
        kubectl port-forward service/frontend-api 8080:80 &
        PORT_FORWARD_PID=$!
        sleep 10

        echo "Sending markdown to http://localhost:8080/convert"
        RESPONSE=$(curl -s -X POST -H "Content-Type: application/json" -d '{"markdown": "# Hello from Kind!\n\nThis is a **test**."}' http://localhost:8080/convert)

        echo "Response: $RESPONSE"
        TASK_ID=$(echo "$RESPONSE" | jq -r '.id')
        if [ -z "$TASK_ID" ]; then
          echo "❌ Error: Could not get task ID."
          exit 1
        fi

        # wait for task to complete
        for i in {1..10}; do
          RESULT=$(curl -s http://localhost:8080/result/$TASK_ID)
          STATUS=$(echo $RESULT | jq -r '.status')

          if [ "$STATUS" = "completed" ]; then
            echo "✅ Task completed."
            HTML=$(echo $RESULT | jq -r '.html')
            echo "$HTML" | grep -q "<h1>Hello from Kind!</h1>" || { echo "❌ Missing <h1>"; exit 1; }
            echo "$HTML" | grep -q "<strong>test</strong>" || { echo "❌ Missing <strong>"; exit 1; }
            break
          fi

          echo "⏳ Waiting for result..."
          sleep 5
        done

        kill $PORT_FORWARD_PID || true

    - name: Cleanup Kind cluster
      if: always()
      run: kind delete cluster --name ${{ env.KIND_CLUSTER_NAME }}